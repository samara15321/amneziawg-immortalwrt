name: Auto_Build Sync_Releases

on:
  workflow_call:
    inputs:
      tag_name:
        required: true
        type: string

jobs:
  generate-config:
    runs-on: ubuntu-latest
    outputs:
      job-config: ${{ steps.generate-config.outputs.job-config }}
      release_tag: ${{ env.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.16.0'

      - name: Get OpenWRT version from tag_name
        id: get_version
        run: |
          echo "VERSION=${{ inputs.tag_name }}" | sed 's/^v//' >> $GITHUB_ENV

      - name: Install dependencies
        run: npm install

      - name: Generate Job Config
        id: generate-config
        run: node sync_index.js ${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  filter-build:
    runs-on: ubuntu-latest
    needs: generate-config
    outputs:
      missing_combos: ${{ steps.filter_missing.outputs.missing_combos }}
    steps:
      - name: Get existing combos from release
        run: |
          release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/samara15321/awg-immortalwrt/releases/tags/${{ inputs.tag_name }} | jq -r .id)
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/samara15321/awg-immortalwrt/releases/$release_id/assets | \
            jq -r '.[].name | split("_") | {pkgarch: .[1], target: .[2], subtarget: .[3]}' | jq -s '.' > existing_combos.json
          echo "existing_combos=$(jq '.' existing_combos.json)" >> $GITHUB_ENV

      - name: Filter for missing combos
        id: filter_missing
        run: |
          missing_combos=$(jq -c --argjson existing "${{ env.existing_combos }}" '. | map(select(. as $c | $existing | index($c) | not))' <<< ${{ fromJson(needs.generate-config.outputs.job-config) }})
          echo "::set-output name=missing_combos::$missing_combos"

  build-missing:
    runs-on: ubuntu-latest
    needs: filter-build
    if: needs.filter-build.outputs.missing_combos != '[]'
    strategy:
      matrix:
        build_env: ${{ fromJson(needs.filter-build.outputs.missing_combos) }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: immortalwrt/immortalwrt
          ref: v${{ matrix.build_env.tag }}
          fetch-depth: 0

      - name: Cache Tools and Kernel
        id: cache-tools-kernel
        uses: actions/cache@v4
        with:
          path: "**"
          key: ${{ runner.os }}-build-vm4-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch}}-${{ matrix.build_env.target}}-${{ matrix.build_env.subtarget }}

      - name: Building kernel and tools
        #if: ${{ steps.cache-tools-kernel.outputs.cache-hit != 'true' }}
        run: |
          echo "pkgarch: ${{ matrix.build_env.pkgarch}}, target:${{ matrix.build_env.target}}, subtarget: ${{ matrix.build_env.subtarget}}"

          # Setup & install feeds
          wget https://downloads.immortalwrt.org//releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/feeds.buildinfo -O feeds.conf
          echo "src-git awg-immortalwrt https://github.com/samara15321/awg-immortalwrt.git" >> ./feeds.conf
          cat ./feeds.conf
          ./scripts/feeds update && ./scripts/feeds install -a

          # Setup config with AWG and dependencies
          wget https://downloads.immortalwrt.org//releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config

          make defconfig

          echo "    > make tools/install"
          make tools/install -i -j `nproc`

          cat ./build_dir/target-*/linux-*/linux-*/.vermagic || true

          echo "    > make toolchain/install"
          make toolchain/install  -i -j `nproc`

          cat ./build_dir/target-*/linux-*/linux-*/.vermagic || true

          # compile kernel module
          echo "    > make target/linux/compile"
          make target/linux/compile  -i -j `nproc` V=s

          VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}

          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
            exit 1
          fi

      - name: Build AmneziaWG
        run: |
          VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          echo "Vermagic: $VERMAGIC"

          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}

          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
            exit 1
          fi

          # Ignore kmod build for some targets, replace with the awg-go
          make package/kmod-amneziawg/{clean,download,prepare} V=s || true
          make package/kmod-amneziawg/compile V=s || true

          make package/luci-app-amneziawg/{clean,download,prepare}
          make package/luci-app-amneziawg/compile V=s

          make V=s package/amneziawg-tools/{clean,download,prepare}
          make V=s package/amneziawg-tools/compile

      - name: Prepare artifacts
        run: |
          tag_name=${{ inputs.tag_name }}
          postfix="v${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget}}"
          mkdir -p awgrelease
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-app-amneziawg_*.ipk awgrelease/luci-app-amneziawg_${postfix}.ipk
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.tag_name }}
          files: awgrelease/*.ipk
