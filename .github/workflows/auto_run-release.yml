name: Auto_Sync OpenWRT Releases

on:
  schedule:
    - cron: '30 23 */1 * *' # Проверка новых релизов
  workflow_dispatch: # Возможность вручную запустить Action

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    outputs:
      release_exists: ${{ steps.check_release.outputs.release_exists }}
      release_tag: ${{ steps.get_release.outputs.release_tag }}
    steps:
      - name: Установка необходимых инструментов
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Checkout вашего репозитория
        uses: actions/checkout@v4

      - name: Получение последнего релиза из OpenWRT
        id: get_release
        run: |
          RELEASE_TAG=$(curl -s https://api.github.com/repos/immortalwrt/immortalwrt/tags | jq -r '.[0].name')
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
          echo "::set-output name=release_tag::${RELEASE_TAG}"

      - name: Проверка существующего релиза в вашем репозитории
        id: check_release
        run: |
          RELEASE_EXISTS=$(curl -s https://api.github.com/repos/samara15321/awg-immortalwrt/releases/tags/${RELEASE_TAG} | jq -r .tag_name)
          if [ -z "$RELEASE_EXISTS" ] || [ "$RELEASE_EXISTS" == "null" ]; then
            echo "release_exists=false" >> $GITHUB_ENV
            echo "::set-output name=release_exists::false"
          else
            echo "release_exists=true" >> $GITHUB_ENV
            echo "::set-output name=release_exists::true"
          fi

      - name: Проверка сохраненного состояния
        id: check_saved_state
        run: |
          if [ -f saved_release_tag.txt ]; then
            SAVED_RELEASE=$(cat saved_release_tag.txt)
            if [ "$SAVED_RELEASE" == "$RELEASE_TAG" ]; then
              echo "Найдено сохраненное состояние: $SAVED_RELEASE (пропускаем шаги)."
              exit 0
            fi
          fi

      - name: Сохранение тега для повторного запуска
        if: steps.check_release.outputs.release_exists == 'false'
        run: |
          echo "${RELEASE_TAG}" > saved_release_tag.txt
          echo "Сохранен тег для следующего запуска: ${RELEASE_TAG}"

      - name: Принудительное завершение (если релиз отсутствует)
        if: steps.check_release.outputs.release_exists == 'false'
        run: |
          echo "Релиз еще отсутствует в вашем репозитории. Завершаем выполнение."
          exit 0

      - name: Create release in your repo
        if: env.release_exists == 'false'
        run: |
          ART="
          \`\`\`
                   A M N E Z I A   W I R E G U A R D
          -----------------------------------------------------
                   OpenWrt ${{ env.release_tag }}
          -----------------------------------------------------
          \`\`\`"
          curl -X POST https://api.github.com/repos/samara1531/awg-openwrt/releases \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
                "tag_name": "${{ env.release_tag }}",
                "name": "OpenWrt ${{ env.release_tag }}",
                "body": "'"${ART//\"/\\\"}"'"
              }'

  run-build:
    needs: sync-releases
    if: needs.sync-releases.outputs.release_exists == 'false'
    uses: samara15321/awg-immortalwrt/.github/workflows/auto_build.yml@master
    with:
      tag_name: ${{ needs.sync-releases.outputs.release_tag }}

  restore-state:
    needs: sync-releases
    runs-on: ubuntu-latest
    steps:
      - name: Загрузка сохраненного состояния
        run: |
          if [ -f saved_release_tag.txt ]; then
            echo "Found saved release state from previous run."
          else
            echo "No saved state found."
          fi
