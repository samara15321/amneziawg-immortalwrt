name: Auto_Sync OpenWRT Releases

on:
  schedule:
    - cron: '30 23 */1 * *'
  workflow_dispatch:

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Read saved release tag
        id: read_saved_tag
        run: |
          SAVED_RELEASE=""
          if [ -f saved_release_tag.txt ] && [ -s saved_release_tag.txt ]; then
            SAVED_RELEASE=$(cat saved_release_tag.txt)
          fi
          echo "saved_release=$SAVED_RELEASE" >> $GITHUB_OUTPUT

      - name: Fetch latest release from ImmortalWRT
        run: |
          RELEASE_TAG=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -s https://api.github.com/repos/immortalwrt/immortalwrt/tags | jq -r '.[0].name')

          echo "LATEST_RELEASE=$RELEASE_TAG" >> $GITHUB_ENV

      - name: Compare release tags
        run: |
          if [[ "${{ steps.read_saved_tag.outputs.saved_release }}" == "$LATEST_RELEASE" ]]; then
            echo "Releases match. Exiting."
            echo "SKIP=true" >> $GITHUB_ENV
            exit 0
          fi
          echo "Releases differ. Proceeding."
          echo "SKIP=false" >> $GITHUB_ENV

      - name: Check if release exists in your repo
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://api.github.com/repos/samara15321/awg-immortalwrt/releases/tags/$LATEST_RELEASE")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "Release exists. Exiting."
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Release does not exist. Proceeding."
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create release in your repo
        if: env.RELEASE_EXISTS == 'false' && env.SKIP == 'false'
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @- https://api.github.com/repos/samara15321/awg-immortalwrt/releases <<EOF
          {
            "tag_name": "$LATEST_RELEASE",
            "name": "ImmortalWrt $LATEST_RELEASE",
            "body": "**Changelog:**\n$COMMITS"
          }
          EOF

      - name: Save latest release tag
        if: env.SKIP == 'false'
        run: |
          echo "$LATEST_RELEASE" > saved_release_tag.txt
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add saved_release_tag.txt
          git commit -m "Update saved_release_tag to $LATEST_RELEASE"
          git push

  run-build:
    needs: sync-releases
    if: needs.sync-releases.outputs.release_exists == 'false' && env.SKIP == 'false'
    uses: samara15321/awg-immortalwrt/.github/workflows/auto_build.yml@master
    with:
      tag_name: ${{ env.LATEST_RELEASE }}
