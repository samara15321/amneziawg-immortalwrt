name: 2-Re-build_Releases
on:
  schedule:
    - cron: '40 23 */7 * *' # Повторный релиз на случай фейла каких-то пакетов в авторелизе.
  workflow_dispatch: # Возможность вручную запустить Action
  
jobs:
  generate-config:
    runs-on: ubuntu-latest
    outputs:
        job-config: ${{ steps.generate-config.outputs.job-config }}
        release_tag: ${{ env.VERSION }}
    steps:

      - name: Checkout repository content
        uses: actions/checkout@v4
        
      - name: Get the latest release from OpenWRT
        id: get_release
        run: |
          RELEASE_TAG=$(curl -s https://api.github.com/repos/immortalwrt/immortalwrt/tags | jq -r '.[0].name')
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_ENV
          echo "RELEASE_TAG is: $RELEASE_TAG"

      - name: Get OpenWRT version from tag_name
        run: |
           echo "VERSION=${{ env.release_tag }}" >> $GITHUB_ENV
           echo "VERSION is set to: ${{ env.release_tag }}"

      - name: Debug tag_name
        run: |
          echo "Debugging VERSION..."
          echo "VERSION is: ${{ env.VERSION }}"
          echo "Release Tag (from ENV): ${{ env.release_tag }}"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.16.0'

      - name: Install dependencies
        run: npm install

      - name: Generate Job Config
        id: generate-config
        # Передаём переменную VERSION, чтобы она стала доступна в вашем скрипте
        run: node sync_index.js ${VERSION}
        env:
          VERSION: ${{ env.VERSION }}  # Убедитесь, что вы используете нужное значение
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  build:
     name: "v${{ matrix.build_env.tag }} - ${{ matrix.build_env.pkgarch}} :: ${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}} build"
     runs-on: ubuntu-latest
     needs: generate-config
     strategy:
      matrix:
       build_env: ${{ fromJson(needs.generate-config.outputs.job-config) }}

     steps:
      - uses: actions/checkout@v4
        with:
          repository: immortalwrt/immortalwrt
          ref: v${{ matrix.build_env.tag }}
          fetch-depth: 0

      - name: Check if build with current vermagic exists
        run: |
          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}
          FILE_URL="https://github.com/samara15321/awg-immortalwrt/releases/download/v${{ matrix.build_env.tag }}/amneziawg-tools_${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch }}_${{ matrix.build_env.target }}_${{ matrix.build_env.subtarget }}.ipk"
          
          echo "Checking if file exists: $FILE_URL"
          if curl --head --silent --fail $FILE_URL; then
            echo "Build with vermagic $VERMAGIC_EXPECTED already exists. Skipping build."
            exit 0
          else
            echo "No existing build found for vermagic $VERMAGIC_EXPECTED. Proceeding with build."
          fi
     

      - name: Building kernel and tools
        if: ${{ steps.cache-tools-kernel.outputs.cache-hit != 'true' }} fi
        run: |
          echo "pkgarch: ${{ matrix.build_env.pkgarch}}, target:${{ matrix.build_env.target}}, subtarget: ${{ matrix.build_env.subtarget}}"
          # Setup & install feeds
          wget https://downloads.immortalwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/feeds.buildinfo -O feeds.conf
          echo "src-git awgopenwrt https://github.com/samara15321/awg-immortalwrt.git" >> ./feeds.conf
          ./scripts/feeds update && ./scripts/feeds install -a


          # Setup config with AWG and dependencies
          wget https://downloads.immortalwrt.org//releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config

          make defconfig

          echo "    > make tools/install"
          make tools/install -i -j `nproc`

          cat ./build_dir/target-*/linux-*/linux-*/.vermagic || true

          echo "    > make toolchain/install"
          make toolchain/install  -i -j `nproc`

          cat ./build_dir/target-*/linux-*/linux-*/.vermagic || true

          # compile kernel module
          echo "    > make target/linux/compile"
          make target/linux/compile  -i -j `nproc` V=s

          VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}

          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
            exit 1
          fi

      - name: Build AmneziaWG
        run: |
          VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          echo "Vermagic: $VERMAGIC"

          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}

          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
            exit 1
          fi

          # Ignore kmod build for some targets, replace with the awg-go
          make package/kmod-amneziawg/{clean,download,prepare} V=s || true
          make package/kmod-amneziawg/compile V=s || true

          make package/luci-app-amneziawg/{clean,download,prepare}
          make package/luci-app-amneziawg/compile V=s

          make V=s package/amneziawg-tools/{clean,download,prepare}
          make V=s package/amneziawg-tools/compile

      - name: Prepare artifacts
        run: |
          tag_name="$v${{ matrix.build_env.tag }}"
          mkdir -p awgrelease
          postfix="v${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget}}_${{ matrix.build_env.vermagic }}"
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-app-amneziawg_*.ipk awgrelease/luci-app-amneziawg_${postfix}.ipk
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk

          
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ matrix.build_env.tag }}"
          files: awgrelease/*.ipk
