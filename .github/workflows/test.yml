name: Auto_Sync_and_Build_Releases

on:
  schedule:
    - cron: '30 23 */8 * *' # Проверка новых релизов раз в 8 дней
  workflow_dispatch: # Возможность вручную запустить Action

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    outputs:
      release_exists: ${{ steps.check_release.outputs.release_exists }}
      release_tag: ${{ steps.get_release.outputs.release_tag }}
      missing_packages: ${{ steps.check_missing_packages.outputs.missing_packages }}
    steps:
      - name: Checkout your repo
        uses: actions/checkout@v4

      - name: Get the latest release from OpenWRT
        id: get_release
        run: |
          RELEASE_TAG=$(curl -s https://api.github.com/repos/immortalwrt/immortalwrt/tags | jq -r '.[0].name')
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_ENV
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: Check if release exists in your repo
        id: check_release
        run: |
          RELEASE_EXISTS=$(curl -s https://api.github.com/repos/samara15321/awg-immortalwrt/releases/tags/${{ env.release_tag }} | jq -r .tag_name)
          if [ -z "$RELEASE_EXISTS" ] || [ "$RELEASE_EXISTS" == "null" ]; then
            echo "release_exists=false" >> $GITHUB_ENV
            echo "release_exists=false" >> $GITHUB_OUTPUT
          else
            echo "release_exists=true" >> $GITHUB_ENV
            echo "release_exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Check for missing packages in the release
        id: check_missing_packages
        run: |
           MISSING_PACKAGES=""
           PACKAGES=("amneziawg-tools" "luci-app-amneziawg" "kmod-amneziawg")

           # Использование переменной release_tag
           RESPONSE=$(curl -s "https://api.github.com/repos/samara15321/awg-immortalwrt/releases/tags/${{ env.release_tag }}")
           echo "API response for tag ${{ env.release_tag }}: $RESPONSE" # Диагностический вывод

           for PACKAGE in "${PACKAGES[@]}"; do
             PACKAGE_FILE="${PACKAGE}_${{ env.release_tag }}_${{ matrix.build_env.pkgarch }}_${{ matrix.build_env.target }}_${{ matrix.build_env.subtarget }}_${{ matrix.build_env.vermagic }}.ipk"
             PACKAGE_EXISTS=$(echo "$RESPONSE" | jq -r ".assets | .[].name" | grep -E "^$PACKAGE_FILE$")

             if [ -z "$PACKAGE_EXISTS" ]; then
               MISSING_PACKAGES="${MISSING_PACKAGES}${PACKAGE}_ipk "
             fi
           done

           echo "missing_packages=$MISSING_PACKAGES" >> $GITHUB_ENV
           echo "missing_packages=$MISSING_PACKAGES" >> $GITHUB_OUTPUT

           if [ -n "$MISSING_PACKAGES" ]; then
             echo "Error: Missing packages: $MISSING_PACKAGES"
             exit 1
           else
           echo "All packages are present."
           fi

      - name: Create release in your repo
        if: ${{ env.release_exists == 'false' }}
        run: |
          ART="
          \`\`\`
                   A M N E Z I A   W I R E G U A R D
          -----------------------------------------------------
                   ImmortalWrt ${{ env.release_tag }}
          -----------------------------------------------------
          \`\`\`"
          curl -X POST https://api.github.com/repos/samara15321/awg-immortalwrt/releases \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
                "tag_name": "${{ env.release_tag }}",
                "name": "ImmortalWrt ${{ env.release_tag }}",
                "body": "'"${ART//\"/\\\"}"'"
              }'

  build-release:
    if: ${{ needs.sync-releases.outputs.release_exists == 'false' || needs.sync-releases.outputs.missing_packages != '' }}
    needs: sync-releases
    runs-on: ubuntu-latest

    steps:
      - name: Checkout your repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get OpenWRT version from tag_name
        id: get_version
        run: |
          VERSION="${{ needs.sync-releases.outputs.release_tag }}"
          echo "VERSION=${VERSION}" | sed 's/^v//' >> $GITHUB_ENV

      - name: Install dependencies
        run: npm install

      - name: Generate Job Config
        id: generate-config
        run: node sync_index.js ${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: "v${{ matrix.build_env.tag }} - ${{ matrix.build_env.pkgarch}} :: ${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}} build"
    runs-on: ubuntu-latest
    needs: build-release
    strategy:
      matrix:
        build_env: ${{ fromJson(needs.build-release.outputs.job-config) }}

    steps:
      - name: Checkout immortalwrt repo
        uses: actions/checkout@v4
        with:
          repository: immortalwrt/immortalwrt
          ref: ${{ needs.sync-releases.outputs.release_tag }}  # Используем переменную из предыдущего шага
          fetch-depth: 0

      - name: Cache Tools and Kernel
        id: cache-tools-kernel
        uses: actions/cache@v4
        env:
          cache-name: "cache-tools-kernel-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch}}-${{ matrix.build_env.target}}-${{ matrix.build_env.subtarget}}"
        with:
          path: "**"
          key: ${{ runner.os }}-build-vm4-${{ env.cache-name }}

      - name: Building kernel and tools
        if: ${{ steps.cache-tools-kernel.outputs.cache-hit != 'true' }}
        run: |
          echo "pkgarch: ${{ matrix.build_env.pkgarch }}, target: ${{ matrix.build_env.target }}, subtarget: ${{ matrix.build_env.subtarget }}"

          # Setup & install feeds
          wget https://downloads.immortalwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/feeds.buildinfo -O feeds.conf
          echo "src-git awg-immortalwrt https://github.com/samara15321/awg-immortalwrt.git" >> ./feeds.conf
          cat ./feeds.conf
          ./scripts/feeds update && ./scripts/feeds install -a

          # Setup config with AWG and dependencies
          wget https://downloads.immortalwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config

          make defconfig

          echo "    > make tools/install"
          make tools/install -i -j `nproc`

          echo "    > make toolchain/install"
          make toolchain/install  -i -j `nproc`

          # compile kernel module
          echo "    > make target/linux/compile"
          make target/linux/compile  -i -j `nproc` V=s

          VERMAGIC=$(cat ./build_dir/target-*/linux-*/linux-*/.vermagic)
          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}

          if [[ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]]; then
            echo "Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED"
            exit 1
          fi

      - name: Build AmneziaWG
        run: |
          # Ignore kmod build for some targets, replace with the awg-go
          make package/kmod-amneziawg/{clean,download,prepare} V=s || true
          make package/kmod-amneziawg/compile V=s || true

          make package/luci-app-amneziawg/{clean,download,prepare}
          make package/luci-app-amneziawg/compile V=s

          make V=s package/amneziawg-tools/{clean,download,prepare}
          make V=s package/amneziawg-tools/compile

      - name: Prepare artifacts
        run: |
           mkdir -p awgrelease
           postfix="v${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget}}"
           vermagic="${VERMAGIC}"

           # Копируем файлы с добавлением vermagic в имя
           cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}_$vermagic.ipk
           cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-app-amneziawg_*.ipk awgrelease/luci-app-amneziawg_${postfix}_$vermagic.ipk
           cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}_$vermagic.ipk

      - name: Upload artifacts to release
        if: ${{ needs.sync-releases.outputs.release_exists == 'false' }}
        uses: softprops/action-gh-release@v1
        with:
          files: awgrelease/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
