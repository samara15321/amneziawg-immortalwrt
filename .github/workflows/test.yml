name: Re-build_Releases
on:
  schedule:
    - cron: '40 23 */7 * *' # Повторный релиз на случай фейла каких-то пакетов в авторелизе.
  workflow_dispatch: # Возможность вручную запустить Action
  
jobs:
  generate-config:
    runs-on: ubuntu-latest
    outputs:
        job-config: ${{ steps.generate-config.outputs.job-config }}
        release_tag: ${{ env.VERSION }}
    steps:

      - name: Checkout repository content
        uses: actions/checkout@v4
        
      - name: Get the latest release from OpenWRT
        id: get_release
        run: |
          RELEASE_TAG=$(curl -s https://api.github.com/repos/immortalwrt/immortalwrt/tags | jq -r '.[0].name')
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_ENV
          echo "RELEASE_TAG is: $RELEASE_TAG"

      - name: Get OpenWRT version from tag_name
        run: |
           echo "VERSION=${{ env.release_tag }}" >> $GITHUB_ENV
           echo "VERSION is set to: ${{ env.release_tag }}"

      - name: Debug tag_name
        run: |
          echo "Debugging VERSION..."
          echo "VERSION is: ${{ env.VERSION }}"
          echo "Release Tag (from ENV): ${{ env.release_tag }}"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.16.0'

      - name: Install dependencies
        run: npm install

      - name: Generate Job Config
        id: generate-config
        # Передаём переменную VERSION, чтобы она стала доступна в вашем скрипте
        run: node sync_index.js ${VERSION}
        env:
          VERSION: ${{ env.VERSION }}  # Убедитесь, что вы используете нужное значение
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Debug job-config
        run: echo "${{ needs.generate-config.outputs.job-config }}"    
      - name: Load builds log
        id: load_log
        run: |
          # Имя файла, где мы будем хранить данные о количестве сборок для каждого тега
          FILE=".builds_log.json"
          if [ ! -f $FILE ]; then
            echo "{}" > $FILE
          fi
          cat $FILE

      - name: Check if tag has been built too many times
        id: check_build_count
        run: |
          TAG_NAME=${{ github.ref_name }} # Получение текущего тега из workflow
          FILE=".builds_log.json" # Файл с учётом предыдущих сборок
          
          # Загружаем файл JSON и проверяем количество запусков для текущего тега
          BUILDS=$(jq -r --arg tag "$TAG_NAME" '.[$tag] // 0' $FILE)
          echo "Current build count for tag $TAG_NAME: $BUILDS"

          # Проверяем, если сборки были запущены >= 2, завершаем процесс
          if [ "$BUILDS" -ge 2 ]; then
            echo "Tag $TAG_NAME has already been built 2 or more times. Skipping build."
            exit 0
          fi

          # Увеличиваем количество запусков для текущего тега и сохраняем обратно в JSON файл
          BUILDS=$((BUILDS + 1))
          echo "Updating build count for tag $TAG_NAME to $BUILDS"
          jq --arg tag "$TAG_NAME" --argjson count $BUILDS '.[$tag] = $count' $FILE > tmp.$$.json && mv tmp.$$.json $FILE

      - name: Save build log
        uses: actions/upload-artifact@v3
        with:
          name: build-log
          path: .builds_log.json

  build:
     name: "v${{ matrix.build_env.tag }} - ${{ matrix.build_env.pkgarch}} :: ${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}} build"
     runs-on: ubuntu-latest
     needs: generate-config
     strategy:
      matrix:
       build_env: ${{ fromJson(needs.generate-config.outputs.job-config) }}

     steps:
      - uses: actions/checkout@v4
        with:
          repository: immortalwrt/immortalwrt
          ref: v${{ matrix.build_env.tag }}
          fetch-depth: 0

      - name: Cache Tools and Kernel
        id: cache-tools-kernel
        uses: actions/cache@v4
        env:
          cache-name: "cache-tools-kernel-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch}}-${{ matrix.build_env.target}}-${{ matrix.build_env.subtarget}}"
        with:
          path: "**"
          key: ${{ runner.os }}-build-vm4-${{ env.cache-name }}

      - name: Building kernel and tools
        if: ${{ steps.cache-tools-kernel.outputs.cache-hit != 'true' }} fi
        run: |
          echo "pkgarch: ${{ matrix.build_env.pkgarch}}, target:${{ matrix.build_env.target}}, subtarget: ${{ matrix.build_env.subtarget}}"
          # Setup & install feeds
          wget https://downloads.immortalwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/feeds.buildinfo -O feeds.conf
          echo "src-git awgopenwrt https://github.com/samara15321/awg-immortalwrt.git" >> ./feeds.conf
          ./scripts/feeds update && ./scripts/feeds install -a


          # Setup config with AWG and dependencies
          wget https://downloads.immortalwrt.org//releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config

          make defconfig

          echo "    > make tools/install"
          make tools/install -i -j `nproc`

          cat ./build_dir/target-*/linux-*/linux-*/.vermagic || true

          echo "    > make toolchain/install"
          make toolchain/install  -i -j `nproc`

          cat ./build_dir/target-*/linux-*/linux-*/.vermagic || true

          # compile kernel module
          echo "    > make target/linux/compile"
          make target/linux/compile  -i -j `nproc` V=s

          VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}

          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
            exit 1
          fi

      - name: Build AmneziaWG
        run: |
          VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          echo "Vermagic: $VERMAGIC"

          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}

          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
            exit 1
          fi

          # Ignore kmod build for some targets, replace with the awg-go
          make package/kmod-amneziawg/{clean,download,prepare} V=s || true
          make package/kmod-amneziawg/compile V=s || true

          make package/luci-app-amneziawg/{clean,download,prepare}
          make package/luci-app-amneziawg/compile V=s

          make V=s package/amneziawg-tools/{clean,download,prepare}
          make V=s package/amneziawg-tools/compile

      - name: Prepare artifacts
        run: |
          tag_name="v${{ matrix.build_env.tag }}"
          mkdir -p awgrelease
          postfix="v${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget}}"
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-app-amneziawg_*.ipk awgrelease/luci-app-amneziawg_${postfix}.ipk
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk

      - name: Check if release exists
        id: check_release
        run: |
          RELEASE_TAG="v${{ matrix.build_env.tag }}"
          
          # Получаем данные о релизе
          RESPONSE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG)
          
          # Проверка, если релиз не найден
          if echo "$RESPONSE" | jq -e '.message == "Not Found"' > /dev/null; then
            echo "Release does not exist, skipping deletion"
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          else
            echo "Release exists, deleting old assets"
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV

            # Получаем ID релиза
            RELEASE_ID=$(echo "$RESPONSE" | jq -r '.[0].id')
            echo "Release ID: $RELEASE_ID"
            
            # Получаем список артефактов релиза
            ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets)
            
            # Проверка на пустоту списка артефактов
            if [ "$(echo "$ASSETS" | jq 'length')" -gt 0 ]; then
              # Удаляем все старые файлы
              for asset in $(echo "$ASSETS" | jq -r '.[].id'); do
                echo "Deleting asset ID: $asset"
                curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset"
              done
            else
              echo "No assets found for the release, skipping deletion."
            fi
          fi
          
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.tag_name }}
          files: awgrelease/*.ipk
