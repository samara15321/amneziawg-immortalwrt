name: Auto_Sync OpenWRT Releases

on:
  schedule:
    - cron: '30 23 */8 * *' # Проверка новых релизов
  workflow_dispatch: # Возможность вручную запустить Action

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    outputs:
      release_exists: ${{ steps.check_release.outputs.release_exists }}
      missing_builds: ${{ steps.check_artifacts.outputs.missing_builds }}
      release_tag: ${{ steps.get_release.outputs.release_tag }}
    steps:
      - name: Checkout your repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Get the latest release from OpenWRT
        id: get_release
        run: |
          RELEASE_TAG=$(curl -s https://api.github.com/repos/immortalwrt/immortalwrt/tags | jq -r '.[0].name')
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

      - name: Check if release exists in your repo
        id: check_release
        run: |
          RELEASE_EXISTS=$(curl -s https://api.github.com/repos/samara15321/awg-immortalwrt/releases/tags/${{ env.release_tag }} | jq -r .tag_name)
          if [ -z "$RELEASE_EXISTS" ] || [ "$RELEASE_EXISTS" == "null" ]; then
            echo "release_exists=false" >> $GITHUB_ENV
          else
            echo "release_exists=true" >> $GITHUB_ENV
          fi

      - name: Check missing build artifacts
        id: check_artifacts
        run: |
          MISSING_BUILDS=()
          CONFIG=$(node sync_index.js ${{ env.release_tag }})
          for BUILD in $(echo $CONFIG | jq -c '.[]'); do
            PKGARCH=$(echo $BUILD | jq -r '.pkgarch')
            TARGET=$(echo $BUILD | jq -r '.target')
            SUBTARGET=$(echo $BUILD | jq -r '.subtarget')
            ARTIFACT_URL="https://github.com/samara15321/awg-immortalwrt/releases/download/${{ env.release_tag }}/kmod-amneziawg_${{ env.release_tag }}_${PKGARCH}_${TARGET}_${SUBTARGET}.ipk"
            if ! curl --head --silent --fail $ARTIFACT_URL > /dev/null; then
              MISSING_BUILDS+=("${PKGARCH}_${TARGET}_${SUBTARGET}")
            fi
          done
          if [ ${#MISSING_BUILDS[@]} -eq 0 ]; then
            echo "missing_builds=none" >> $GITHUB_ENV
          else
            MISSING_BUILDS_STR=$(IFS=","; echo "${MISSING_BUILDS[*]}")
            echo "MISSING_BUILDS=$MISSING_BUILDS_STR" >> $GITHUB_ENV
          fi
          outputs:
          missing_builds: ${{ env.MISSING_BUILDS }}

      - name: Create release if not exists
        if: env.release_exists == 'false'
        run: |
          ART="
          \`\`\`
                   A M N E Z I A   W I R E G U A R D
          -----------------------------------------------------
                   ImmortalWrt ${{ env.release_tag }}
          -----------------------------------------------------
          \`\`\`"
          curl -X POST https://api.github.com/repos/samara15321/awg-immortalwrt/releases \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
                "tag_name": "${{ env.release_tag }}",
                "name": "ImmortalWrt ${{ env.release_tag }}",
                "body": "'"${ART//\"/\\\"}"'"
              }'

  run-build:
    needs: sync-releases
    if: needs.sync-releases.outputs.missing_builds != 'none'
    runs-on: ubuntu-latest
    steps:
      - name: Setup and Run
        run: |
          MISSING_BUILDS="${{ needs.sync-releases.outputs.missing_builds }}"
          for BUILD in $(echo $MISSING_BUILDS | tr ',' '\n'); do
            IFS="_" read -r PKGARCH TARGET SUBTARGET <<< "$BUILD"
            ./build_script.sh --pkgarch "$PKGARCH" --target "$TARGET" --subtarget "$SUBTARGET"
          done
